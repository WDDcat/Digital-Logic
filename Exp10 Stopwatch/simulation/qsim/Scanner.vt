// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "11/30/2017 15:15:01"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    timer
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module timer_vlg_sample_tst(
	clk,
	sampler_tx
);
input  clk;
output sampler_tx;

reg sample;
time current_time;
always @(clk)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module timer_vlg_check_tst (
	data1,
	data2,
	data4,
	data5,
	data7,
	data8,
	sampler_rx
);
input [3:0] data1;
input [3:0] data2;
input [3:0] data4;
input [3:0] data5;
input [3:0] data7;
input [3:0] data8;
input sampler_rx;

reg [3:0] data1_expected;
reg [3:0] data2_expected;
reg [3:0] data4_expected;
reg [3:0] data5_expected;
reg [3:0] data7_expected;
reg [3:0] data8_expected;

reg [3:0] data1_prev;
reg [3:0] data2_prev;
reg [3:0] data4_prev;
reg [3:0] data5_prev;
reg [3:0] data7_prev;
reg [3:0] data8_prev;

reg [3:0] data1_expected_prev;
reg [3:0] data2_expected_prev;
reg [3:0] data4_expected_prev;
reg [3:0] data5_expected_prev;
reg [3:0] data7_expected_prev;
reg [3:0] data8_expected_prev;

reg [3:0] last_data1_exp;
reg [3:0] last_data2_exp;
reg [3:0] last_data4_exp;
reg [3:0] last_data5_exp;
reg [3:0] last_data7_exp;
reg [3:0] last_data8_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:6] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 6'b1;
end

// update real /o prevs

always @(trigger)
begin
	data1_prev = data1;
	data2_prev = data2;
	data4_prev = data4;
	data5_prev = data5;
	data7_prev = data7;
	data8_prev = data8;
end

// update expected /o prevs

always @(trigger)
begin
	data1_expected_prev = data1_expected;
	data2_expected_prev = data2_expected;
	data4_expected_prev = data4_expected;
	data5_expected_prev = data5_expected;
	data7_expected_prev = data7_expected;
	data8_expected_prev = data8_expected;
end


// expected data1[ 3 ]
initial
begin
	data1_expected[3] = 1'bX;
end 
// expected data1[ 2 ]
initial
begin
	data1_expected[2] = 1'bX;
end 
// expected data1[ 1 ]
initial
begin
	data1_expected[1] = 1'bX;
end 
// expected data1[ 0 ]
initial
begin
	data1_expected[0] = 1'bX;
end 
// expected data2[ 3 ]
initial
begin
	data2_expected[3] = 1'bX;
end 
// expected data2[ 2 ]
initial
begin
	data2_expected[2] = 1'bX;
end 
// expected data2[ 1 ]
initial
begin
	data2_expected[1] = 1'bX;
end 
// expected data2[ 0 ]
initial
begin
	data2_expected[0] = 1'bX;
end 
// expected data4[ 3 ]
initial
begin
	data4_expected[3] = 1'bX;
end 
// expected data4[ 2 ]
initial
begin
	data4_expected[2] = 1'bX;
end 
// expected data4[ 1 ]
initial
begin
	data4_expected[1] = 1'bX;
end 
// expected data4[ 0 ]
initial
begin
	data4_expected[0] = 1'bX;
end 
// expected data5[ 3 ]
initial
begin
	data5_expected[3] = 1'bX;
end 
// expected data5[ 2 ]
initial
begin
	data5_expected[2] = 1'bX;
end 
// expected data5[ 1 ]
initial
begin
	data5_expected[1] = 1'bX;
end 
// expected data5[ 0 ]
initial
begin
	data5_expected[0] = 1'bX;
end 
// expected data7[ 3 ]
initial
begin
	data7_expected[3] = 1'bX;
end 
// expected data7[ 2 ]
initial
begin
	data7_expected[2] = 1'bX;
end 
// expected data7[ 1 ]
initial
begin
	data7_expected[1] = 1'bX;
end 
// expected data7[ 0 ]
initial
begin
	data7_expected[0] = 1'bX;
end 
// expected data8[ 3 ]
initial
begin
	data8_expected[3] = 1'bX;
end 
// expected data8[ 2 ]
initial
begin
	data8_expected[2] = 1'bX;
end 
// expected data8[ 1 ]
initial
begin
	data8_expected[1] = 1'bX;
end 
// expected data8[ 0 ]
initial
begin
	data8_expected[0] = 1'bX;
end 
// generate trigger
always @(data1_expected or data1 or data2_expected or data2 or data4_expected or data4 or data5_expected or data5 or data7_expected or data7 or data8_expected or data8)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected data1 = %b | expected data2 = %b | expected data4 = %b | expected data5 = %b | expected data7 = %b | expected data8 = %b | ",data1_expected_prev,data2_expected_prev,data4_expected_prev,data5_expected_prev,data7_expected_prev,data8_expected_prev);
	$display("| real data1 = %b | real data2 = %b | real data4 = %b | real data5 = %b | real data7 = %b | real data8 = %b | ",data1_prev,data2_prev,data4_prev,data5_prev,data7_prev,data8_prev);
`endif
	if (
		( data1_expected_prev[0] !== 1'bx ) && ( data1_prev[0] !== data1_expected_prev[0] )
		&& ((data1_expected_prev[0] !== last_data1_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data1[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data1_expected_prev);
		$display ("     Real value = %b", data1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_data1_exp[0] = data1_expected_prev[0];
	end
	if (
		( data1_expected_prev[1] !== 1'bx ) && ( data1_prev[1] !== data1_expected_prev[1] )
		&& ((data1_expected_prev[1] !== last_data1_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data1[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data1_expected_prev);
		$display ("     Real value = %b", data1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_data1_exp[1] = data1_expected_prev[1];
	end
	if (
		( data1_expected_prev[2] !== 1'bx ) && ( data1_prev[2] !== data1_expected_prev[2] )
		&& ((data1_expected_prev[2] !== last_data1_exp[2]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data1[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data1_expected_prev);
		$display ("     Real value = %b", data1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_data1_exp[2] = data1_expected_prev[2];
	end
	if (
		( data1_expected_prev[3] !== 1'bx ) && ( data1_prev[3] !== data1_expected_prev[3] )
		&& ((data1_expected_prev[3] !== last_data1_exp[3]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data1[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data1_expected_prev);
		$display ("     Real value = %b", data1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_data1_exp[3] = data1_expected_prev[3];
	end
	if (
		( data2_expected_prev[0] !== 1'bx ) && ( data2_prev[0] !== data2_expected_prev[0] )
		&& ((data2_expected_prev[0] !== last_data2_exp[0]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data2[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data2_expected_prev);
		$display ("     Real value = %b", data2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_data2_exp[0] = data2_expected_prev[0];
	end
	if (
		( data2_expected_prev[1] !== 1'bx ) && ( data2_prev[1] !== data2_expected_prev[1] )
		&& ((data2_expected_prev[1] !== last_data2_exp[1]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data2[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data2_expected_prev);
		$display ("     Real value = %b", data2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_data2_exp[1] = data2_expected_prev[1];
	end
	if (
		( data2_expected_prev[2] !== 1'bx ) && ( data2_prev[2] !== data2_expected_prev[2] )
		&& ((data2_expected_prev[2] !== last_data2_exp[2]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data2[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data2_expected_prev);
		$display ("     Real value = %b", data2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_data2_exp[2] = data2_expected_prev[2];
	end
	if (
		( data2_expected_prev[3] !== 1'bx ) && ( data2_prev[3] !== data2_expected_prev[3] )
		&& ((data2_expected_prev[3] !== last_data2_exp[3]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data2[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data2_expected_prev);
		$display ("     Real value = %b", data2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_data2_exp[3] = data2_expected_prev[3];
	end
	if (
		( data4_expected_prev[0] !== 1'bx ) && ( data4_prev[0] !== data4_expected_prev[0] )
		&& ((data4_expected_prev[0] !== last_data4_exp[0]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data4[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data4_expected_prev);
		$display ("     Real value = %b", data4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_data4_exp[0] = data4_expected_prev[0];
	end
	if (
		( data4_expected_prev[1] !== 1'bx ) && ( data4_prev[1] !== data4_expected_prev[1] )
		&& ((data4_expected_prev[1] !== last_data4_exp[1]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data4[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data4_expected_prev);
		$display ("     Real value = %b", data4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_data4_exp[1] = data4_expected_prev[1];
	end
	if (
		( data4_expected_prev[2] !== 1'bx ) && ( data4_prev[2] !== data4_expected_prev[2] )
		&& ((data4_expected_prev[2] !== last_data4_exp[2]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data4[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data4_expected_prev);
		$display ("     Real value = %b", data4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_data4_exp[2] = data4_expected_prev[2];
	end
	if (
		( data4_expected_prev[3] !== 1'bx ) && ( data4_prev[3] !== data4_expected_prev[3] )
		&& ((data4_expected_prev[3] !== last_data4_exp[3]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data4[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data4_expected_prev);
		$display ("     Real value = %b", data4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_data4_exp[3] = data4_expected_prev[3];
	end
	if (
		( data5_expected_prev[0] !== 1'bx ) && ( data5_prev[0] !== data5_expected_prev[0] )
		&& ((data5_expected_prev[0] !== last_data5_exp[0]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data5[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data5_expected_prev);
		$display ("     Real value = %b", data5_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_data5_exp[0] = data5_expected_prev[0];
	end
	if (
		( data5_expected_prev[1] !== 1'bx ) && ( data5_prev[1] !== data5_expected_prev[1] )
		&& ((data5_expected_prev[1] !== last_data5_exp[1]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data5[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data5_expected_prev);
		$display ("     Real value = %b", data5_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_data5_exp[1] = data5_expected_prev[1];
	end
	if (
		( data5_expected_prev[2] !== 1'bx ) && ( data5_prev[2] !== data5_expected_prev[2] )
		&& ((data5_expected_prev[2] !== last_data5_exp[2]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data5[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data5_expected_prev);
		$display ("     Real value = %b", data5_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_data5_exp[2] = data5_expected_prev[2];
	end
	if (
		( data5_expected_prev[3] !== 1'bx ) && ( data5_prev[3] !== data5_expected_prev[3] )
		&& ((data5_expected_prev[3] !== last_data5_exp[3]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data5[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data5_expected_prev);
		$display ("     Real value = %b", data5_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_data5_exp[3] = data5_expected_prev[3];
	end
	if (
		( data7_expected_prev[0] !== 1'bx ) && ( data7_prev[0] !== data7_expected_prev[0] )
		&& ((data7_expected_prev[0] !== last_data7_exp[0]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data7[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data7_expected_prev);
		$display ("     Real value = %b", data7_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_data7_exp[0] = data7_expected_prev[0];
	end
	if (
		( data7_expected_prev[1] !== 1'bx ) && ( data7_prev[1] !== data7_expected_prev[1] )
		&& ((data7_expected_prev[1] !== last_data7_exp[1]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data7[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data7_expected_prev);
		$display ("     Real value = %b", data7_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_data7_exp[1] = data7_expected_prev[1];
	end
	if (
		( data7_expected_prev[2] !== 1'bx ) && ( data7_prev[2] !== data7_expected_prev[2] )
		&& ((data7_expected_prev[2] !== last_data7_exp[2]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data7[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data7_expected_prev);
		$display ("     Real value = %b", data7_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_data7_exp[2] = data7_expected_prev[2];
	end
	if (
		( data7_expected_prev[3] !== 1'bx ) && ( data7_prev[3] !== data7_expected_prev[3] )
		&& ((data7_expected_prev[3] !== last_data7_exp[3]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data7[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data7_expected_prev);
		$display ("     Real value = %b", data7_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_data7_exp[3] = data7_expected_prev[3];
	end
	if (
		( data8_expected_prev[0] !== 1'bx ) && ( data8_prev[0] !== data8_expected_prev[0] )
		&& ((data8_expected_prev[0] !== last_data8_exp[0]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data8[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data8_expected_prev);
		$display ("     Real value = %b", data8_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_data8_exp[0] = data8_expected_prev[0];
	end
	if (
		( data8_expected_prev[1] !== 1'bx ) && ( data8_prev[1] !== data8_expected_prev[1] )
		&& ((data8_expected_prev[1] !== last_data8_exp[1]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data8[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data8_expected_prev);
		$display ("     Real value = %b", data8_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_data8_exp[1] = data8_expected_prev[1];
	end
	if (
		( data8_expected_prev[2] !== 1'bx ) && ( data8_prev[2] !== data8_expected_prev[2] )
		&& ((data8_expected_prev[2] !== last_data8_exp[2]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data8[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data8_expected_prev);
		$display ("     Real value = %b", data8_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_data8_exp[2] = data8_expected_prev[2];
	end
	if (
		( data8_expected_prev[3] !== 1'bx ) && ( data8_prev[3] !== data8_expected_prev[3] )
		&& ((data8_expected_prev[3] !== last_data8_exp[3]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data8[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data8_expected_prev);
		$display ("     Real value = %b", data8_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_data8_exp[3] = data8_expected_prev[3];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module timer_vlg_vec_tst();
// constants                                           
// general purpose registers
reg clk;
// wires                                               
wire [3:0] data1;
wire [3:0] data2;
wire [3:0] data4;
wire [3:0] data5;
wire [3:0] data7;
wire [3:0] data8;

wire sampler;                             

// assign statements (if any)                          
timer i1 (
// port map - connection between master ports and signals/registers   
	.clk(clk),
	.data1(data1),
	.data2(data2),
	.data4(data4),
	.data5(data5),
	.data7(data7),
	.data8(data8)
);

// clk
always
begin
	clk = 1'b0;
	clk = #10000 1'b1;
	#10000;
end 

timer_vlg_sample_tst tb_sample (
	.clk(clk),
	.sampler_tx(sampler)
);

timer_vlg_check_tst tb_out(
	.data1(data1),
	.data2(data2),
	.data4(data4),
	.data5(data5),
	.data7(data7),
	.data8(data8),
	.sampler_rx(sampler)
);
endmodule

