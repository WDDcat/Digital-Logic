// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "11/09/2017 16:00:01"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    Block
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module Block_vlg_sample_tst(
	AA,
	BB,
	S0,
	S1,
	sampler_tx
);
input [3:0] AA;
input [3:0] BB;
input  S0;
input  S1;
output sampler_tx;

reg sample;
time current_time;
always @(AA or BB or S0 or S1)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module Block_vlg_check_tst (
	co,
	led,
	sel,
	sampler_rx
);
input  co;
input [6:0] led;
input  sel;
input sampler_rx;

reg  co_expected;
reg [6:0] led_expected;
reg  sel_expected;

reg  co_prev;
reg [6:0] led_prev;
reg  sel_prev;

reg  co_expected_prev;
reg [6:0] led_expected_prev;
reg  sel_expected_prev;

reg  last_co_exp;
reg [6:0] last_led_exp;
reg  last_sel_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:3] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 3'b1;
end

// update real /o prevs

always @(trigger)
begin
	co_prev = co;
	led_prev = led;
	sel_prev = sel;
end

// update expected /o prevs

always @(trigger)
begin
	co_expected_prev = co_expected;
	led_expected_prev = led_expected;
	sel_expected_prev = sel_expected;
end



// expected sel
initial
begin
	sel_expected = 1'bX;
end 

// expected co
initial
begin
	co_expected = 1'bX;
end 
// expected led[ 6 ]
initial
begin
	led_expected[6] = 1'bX;
end 
// expected led[ 5 ]
initial
begin
	led_expected[5] = 1'bX;
end 
// expected led[ 4 ]
initial
begin
	led_expected[4] = 1'bX;
end 
// expected led[ 3 ]
initial
begin
	led_expected[3] = 1'bX;
end 
// expected led[ 2 ]
initial
begin
	led_expected[2] = 1'bX;
end 
// expected led[ 1 ]
initial
begin
	led_expected[1] = 1'bX;
end 
// expected led[ 0 ]
initial
begin
	led_expected[0] = 1'bX;
end 
// generate trigger
always @(co_expected or co or led_expected or led or sel_expected or sel)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected co = %b | expected led = %b | expected sel = %b | ",co_expected_prev,led_expected_prev,sel_expected_prev);
	$display("| real co = %b | real led = %b | real sel = %b | ",co_prev,led_prev,sel_prev);
`endif
	if (
		( co_expected_prev !== 1'bx ) && ( co_prev !== co_expected_prev )
		&& ((co_expected_prev !== last_co_exp) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port co :: @time = %t",  $realtime);
		$display ("     Expected value = %b", co_expected_prev);
		$display ("     Real value = %b", co_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_co_exp = co_expected_prev;
	end
	if (
		( led_expected_prev[0] !== 1'bx ) && ( led_prev[0] !== led_expected_prev[0] )
		&& ((led_expected_prev[0] !== last_led_exp[0]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port led[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", led_expected_prev);
		$display ("     Real value = %b", led_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_led_exp[0] = led_expected_prev[0];
	end
	if (
		( led_expected_prev[1] !== 1'bx ) && ( led_prev[1] !== led_expected_prev[1] )
		&& ((led_expected_prev[1] !== last_led_exp[1]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port led[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", led_expected_prev);
		$display ("     Real value = %b", led_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_led_exp[1] = led_expected_prev[1];
	end
	if (
		( led_expected_prev[2] !== 1'bx ) && ( led_prev[2] !== led_expected_prev[2] )
		&& ((led_expected_prev[2] !== last_led_exp[2]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port led[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", led_expected_prev);
		$display ("     Real value = %b", led_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_led_exp[2] = led_expected_prev[2];
	end
	if (
		( led_expected_prev[3] !== 1'bx ) && ( led_prev[3] !== led_expected_prev[3] )
		&& ((led_expected_prev[3] !== last_led_exp[3]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port led[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", led_expected_prev);
		$display ("     Real value = %b", led_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_led_exp[3] = led_expected_prev[3];
	end
	if (
		( led_expected_prev[4] !== 1'bx ) && ( led_prev[4] !== led_expected_prev[4] )
		&& ((led_expected_prev[4] !== last_led_exp[4]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port led[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", led_expected_prev);
		$display ("     Real value = %b", led_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_led_exp[4] = led_expected_prev[4];
	end
	if (
		( led_expected_prev[5] !== 1'bx ) && ( led_prev[5] !== led_expected_prev[5] )
		&& ((led_expected_prev[5] !== last_led_exp[5]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port led[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", led_expected_prev);
		$display ("     Real value = %b", led_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_led_exp[5] = led_expected_prev[5];
	end
	if (
		( led_expected_prev[6] !== 1'bx ) && ( led_prev[6] !== led_expected_prev[6] )
		&& ((led_expected_prev[6] !== last_led_exp[6]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port led[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", led_expected_prev);
		$display ("     Real value = %b", led_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_led_exp[6] = led_expected_prev[6];
	end
	if (
		( sel_expected_prev !== 1'bx ) && ( sel_prev !== sel_expected_prev )
		&& ((sel_expected_prev !== last_sel_exp) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sel :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sel_expected_prev);
		$display ("     Real value = %b", sel_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_sel_exp = sel_expected_prev;
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module Block_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [3:0] AA;
reg [3:0] BB;
reg S0;
reg S1;
// wires                                               
wire co;
wire [6:0] led;
wire sel;

wire sampler;                             

// assign statements (if any)                          
Block i1 (
// port map - connection between master ports and signals/registers   
	.AA(AA),
	.BB(BB),
	.co(co),
	.led(led),
	.S0(S0),
	.S1(S1),
	.sel(sel)
);
// AA[ 3 ]
initial
begin
	AA[3] = 1'b0;
	AA[3] = #400000 1'b1;
	AA[3] = #400000 1'b0;
end 
// AA[ 2 ]
initial
begin
	repeat(2)
	begin
		AA[2] = 1'b0;
		AA[2] = #200000 1'b1;
		# 200000;
	end
	AA[2] = 1'b0;
end 
// AA[ 1 ]
always
begin
	AA[1] = 1'b0;
	AA[1] = #100000 1'b1;
	#100000;
end 
// AA[ 0 ]
always
begin
	AA[0] = 1'b0;
	AA[0] = #50000 1'b1;
	#50000;
end 
// BB[ 3 ]
initial
begin
	BB[3] = 1'b0;
	BB[3] = #300000 1'b1;
	BB[3] = #400000 1'b0;
end 
// BB[ 2 ]
initial
begin
	BB[2] = 1'b0;
	# 100000;
	repeat(2)
	begin
		BB[2] = 1'b1;
		BB[2] = #200000 1'b0;
		# 200000;
	end
	BB[2] = 1'b1;
end 
// BB[ 1 ]
always
begin
	BB[1] = 1'b1;
	BB[1] = #100000 1'b0;
	#100000;
end 
// BB[ 0 ]
always
begin
	BB[0] = 1'b0;
	BB[0] = #50000 1'b1;
	#50000;
end 

// S0
initial
begin
	S0 = 1'b0;
	S0 = #400000 1'b1;
	S0 = #400000 1'b0;
end 

// S1
initial
begin
	repeat(2)
	begin
		S1 = 1'b0;
		S1 = #200000 1'b1;
		# 200000;
	end
	S1 = 1'b0;
end 

Block_vlg_sample_tst tb_sample (
	.AA(AA),
	.BB(BB),
	.S0(S0),
	.S1(S1),
	.sampler_tx(sampler)
);

Block_vlg_check_tst tb_out(
	.co(co),
	.led(led),
	.sel(sel),
	.sampler_rx(sampler)
);
endmodule

