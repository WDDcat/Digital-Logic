// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "11/23/2017 16:56:46"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    NameDispaly
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module NameDispaly_vlg_sample_tst(
	clk,
	clk_50mhz,
	sampler_tx
);
input  clk;
input  clk_50mhz;
output sampler_tx;

reg sample;
time current_time;
always @(clk or clk_50mhz)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module NameDispaly_vlg_check_tst (
	Col,
	Row,
	sampler_rx
);
input [3:0] Col;
input [15:0] Row;
input sampler_rx;

reg [3:0] Col_expected;
reg [15:0] Row_expected;

reg [3:0] Col_prev;
reg [15:0] Row_prev;

reg [3:0] Col_expected_prev;
reg [15:0] Row_expected_prev;

reg [3:0] last_Col_exp;
reg [15:0] last_Row_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:2] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 2'b1;
end

// update real /o prevs

always @(trigger)
begin
	Col_prev = Col;
	Row_prev = Row;
end

// update expected /o prevs

always @(trigger)
begin
	Col_expected_prev = Col_expected;
	Row_expected_prev = Row_expected;
end


// expected Col[ 3 ]
initial
begin
	Col_expected[3] = 1'bX;
end 
// expected Col[ 2 ]
initial
begin
	Col_expected[2] = 1'bX;
end 
// expected Col[ 1 ]
initial
begin
	Col_expected[1] = 1'bX;
end 
// expected Col[ 0 ]
initial
begin
	Col_expected[0] = 1'bX;
end 
// expected Row[ 15 ]
initial
begin
	Row_expected[15] = 1'bX;
end 
// expected Row[ 14 ]
initial
begin
	Row_expected[14] = 1'bX;
end 
// expected Row[ 13 ]
initial
begin
	Row_expected[13] = 1'bX;
end 
// expected Row[ 12 ]
initial
begin
	Row_expected[12] = 1'bX;
end 
// expected Row[ 11 ]
initial
begin
	Row_expected[11] = 1'bX;
end 
// expected Row[ 10 ]
initial
begin
	Row_expected[10] = 1'bX;
end 
// expected Row[ 9 ]
initial
begin
	Row_expected[9] = 1'bX;
end 
// expected Row[ 8 ]
initial
begin
	Row_expected[8] = 1'bX;
end 
// expected Row[ 7 ]
initial
begin
	Row_expected[7] = 1'bX;
end 
// expected Row[ 6 ]
initial
begin
	Row_expected[6] = 1'bX;
end 
// expected Row[ 5 ]
initial
begin
	Row_expected[5] = 1'bX;
end 
// expected Row[ 4 ]
initial
begin
	Row_expected[4] = 1'bX;
end 
// expected Row[ 3 ]
initial
begin
	Row_expected[3] = 1'bX;
end 
// expected Row[ 2 ]
initial
begin
	Row_expected[2] = 1'bX;
end 
// expected Row[ 1 ]
initial
begin
	Row_expected[1] = 1'bX;
end 
// expected Row[ 0 ]
initial
begin
	Row_expected[0] = 1'bX;
end 
// generate trigger
always @(Col_expected or Col or Row_expected or Row)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected Col = %b | expected Row = %b | ",Col_expected_prev,Row_expected_prev);
	$display("| real Col = %b | real Row = %b | ",Col_prev,Row_prev);
`endif
	if (
		( Col_expected_prev[0] !== 1'bx ) && ( Col_prev[0] !== Col_expected_prev[0] )
		&& ((Col_expected_prev[0] !== last_Col_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Col[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Col_expected_prev);
		$display ("     Real value = %b", Col_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Col_exp[0] = Col_expected_prev[0];
	end
	if (
		( Col_expected_prev[1] !== 1'bx ) && ( Col_prev[1] !== Col_expected_prev[1] )
		&& ((Col_expected_prev[1] !== last_Col_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Col[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Col_expected_prev);
		$display ("     Real value = %b", Col_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Col_exp[1] = Col_expected_prev[1];
	end
	if (
		( Col_expected_prev[2] !== 1'bx ) && ( Col_prev[2] !== Col_expected_prev[2] )
		&& ((Col_expected_prev[2] !== last_Col_exp[2]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Col[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Col_expected_prev);
		$display ("     Real value = %b", Col_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Col_exp[2] = Col_expected_prev[2];
	end
	if (
		( Col_expected_prev[3] !== 1'bx ) && ( Col_prev[3] !== Col_expected_prev[3] )
		&& ((Col_expected_prev[3] !== last_Col_exp[3]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Col[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Col_expected_prev);
		$display ("     Real value = %b", Col_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Col_exp[3] = Col_expected_prev[3];
	end
	if (
		( Row_expected_prev[0] !== 1'bx ) && ( Row_prev[0] !== Row_expected_prev[0] )
		&& ((Row_expected_prev[0] !== last_Row_exp[0]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Row[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Row_expected_prev);
		$display ("     Real value = %b", Row_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Row_exp[0] = Row_expected_prev[0];
	end
	if (
		( Row_expected_prev[1] !== 1'bx ) && ( Row_prev[1] !== Row_expected_prev[1] )
		&& ((Row_expected_prev[1] !== last_Row_exp[1]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Row[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Row_expected_prev);
		$display ("     Real value = %b", Row_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Row_exp[1] = Row_expected_prev[1];
	end
	if (
		( Row_expected_prev[2] !== 1'bx ) && ( Row_prev[2] !== Row_expected_prev[2] )
		&& ((Row_expected_prev[2] !== last_Row_exp[2]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Row[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Row_expected_prev);
		$display ("     Real value = %b", Row_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Row_exp[2] = Row_expected_prev[2];
	end
	if (
		( Row_expected_prev[3] !== 1'bx ) && ( Row_prev[3] !== Row_expected_prev[3] )
		&& ((Row_expected_prev[3] !== last_Row_exp[3]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Row[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Row_expected_prev);
		$display ("     Real value = %b", Row_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Row_exp[3] = Row_expected_prev[3];
	end
	if (
		( Row_expected_prev[4] !== 1'bx ) && ( Row_prev[4] !== Row_expected_prev[4] )
		&& ((Row_expected_prev[4] !== last_Row_exp[4]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Row[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Row_expected_prev);
		$display ("     Real value = %b", Row_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Row_exp[4] = Row_expected_prev[4];
	end
	if (
		( Row_expected_prev[5] !== 1'bx ) && ( Row_prev[5] !== Row_expected_prev[5] )
		&& ((Row_expected_prev[5] !== last_Row_exp[5]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Row[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Row_expected_prev);
		$display ("     Real value = %b", Row_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Row_exp[5] = Row_expected_prev[5];
	end
	if (
		( Row_expected_prev[6] !== 1'bx ) && ( Row_prev[6] !== Row_expected_prev[6] )
		&& ((Row_expected_prev[6] !== last_Row_exp[6]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Row[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Row_expected_prev);
		$display ("     Real value = %b", Row_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Row_exp[6] = Row_expected_prev[6];
	end
	if (
		( Row_expected_prev[7] !== 1'bx ) && ( Row_prev[7] !== Row_expected_prev[7] )
		&& ((Row_expected_prev[7] !== last_Row_exp[7]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Row[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Row_expected_prev);
		$display ("     Real value = %b", Row_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Row_exp[7] = Row_expected_prev[7];
	end
	if (
		( Row_expected_prev[8] !== 1'bx ) && ( Row_prev[8] !== Row_expected_prev[8] )
		&& ((Row_expected_prev[8] !== last_Row_exp[8]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Row[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Row_expected_prev);
		$display ("     Real value = %b", Row_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Row_exp[8] = Row_expected_prev[8];
	end
	if (
		( Row_expected_prev[9] !== 1'bx ) && ( Row_prev[9] !== Row_expected_prev[9] )
		&& ((Row_expected_prev[9] !== last_Row_exp[9]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Row[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Row_expected_prev);
		$display ("     Real value = %b", Row_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Row_exp[9] = Row_expected_prev[9];
	end
	if (
		( Row_expected_prev[10] !== 1'bx ) && ( Row_prev[10] !== Row_expected_prev[10] )
		&& ((Row_expected_prev[10] !== last_Row_exp[10]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Row[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Row_expected_prev);
		$display ("     Real value = %b", Row_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Row_exp[10] = Row_expected_prev[10];
	end
	if (
		( Row_expected_prev[11] !== 1'bx ) && ( Row_prev[11] !== Row_expected_prev[11] )
		&& ((Row_expected_prev[11] !== last_Row_exp[11]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Row[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Row_expected_prev);
		$display ("     Real value = %b", Row_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Row_exp[11] = Row_expected_prev[11];
	end
	if (
		( Row_expected_prev[12] !== 1'bx ) && ( Row_prev[12] !== Row_expected_prev[12] )
		&& ((Row_expected_prev[12] !== last_Row_exp[12]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Row[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Row_expected_prev);
		$display ("     Real value = %b", Row_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Row_exp[12] = Row_expected_prev[12];
	end
	if (
		( Row_expected_prev[13] !== 1'bx ) && ( Row_prev[13] !== Row_expected_prev[13] )
		&& ((Row_expected_prev[13] !== last_Row_exp[13]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Row[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Row_expected_prev);
		$display ("     Real value = %b", Row_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Row_exp[13] = Row_expected_prev[13];
	end
	if (
		( Row_expected_prev[14] !== 1'bx ) && ( Row_prev[14] !== Row_expected_prev[14] )
		&& ((Row_expected_prev[14] !== last_Row_exp[14]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Row[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Row_expected_prev);
		$display ("     Real value = %b", Row_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Row_exp[14] = Row_expected_prev[14];
	end
	if (
		( Row_expected_prev[15] !== 1'bx ) && ( Row_prev[15] !== Row_expected_prev[15] )
		&& ((Row_expected_prev[15] !== last_Row_exp[15]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Row[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Row_expected_prev);
		$display ("     Real value = %b", Row_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Row_exp[15] = Row_expected_prev[15];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module NameDispaly_vlg_vec_tst();
// constants                                           
// general purpose registers
reg clk;
reg clk_50mhz;
// wires                                               
wire [3:0] Col;
wire [15:0] Row;

wire sampler;                             

// assign statements (if any)                          
NameDispaly i1 (
// port map - connection between master ports and signals/registers   
	.clk(clk),
	.clk_50mhz(clk_50mhz),
	.Col(Col),
	.Row(Row)
);

// clk
always
begin
	clk = 1'b0;
	clk = #10000 1'b1;
	#10000;
end 

// clk_50mhz
initial
begin
	clk_50mhz = 1'b0;
end 

NameDispaly_vlg_sample_tst tb_sample (
	.clk(clk),
	.clk_50mhz(clk_50mhz),
	.sampler_tx(sampler)
);

NameDispaly_vlg_check_tst tb_out(
	.Col(Col),
	.Row(Row),
	.sampler_rx(sampler)
);
endmodule

