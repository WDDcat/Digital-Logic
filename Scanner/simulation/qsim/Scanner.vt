// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "11/30/2017 14:05:58"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    Scanner
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module Scanner_vlg_sample_tst(
	clk_50mhz,
	clk_hz,
	data1,
	data2,
	data3,
	data4,
	data5,
	data6,
	data7,
	data8,
	sampler_tx
);
input  clk_50mhz;
input  clk_hz;
input [3:0] data1;
input [3:0] data2;
input [3:0] data3;
input [3:0] data4;
input [3:0] data5;
input [3:0] data6;
input [3:0] data7;
input [3:0] data8;
output sampler_tx;

reg sample;
time current_time;
always @(clk_50mhz or clk_hz or data1 or data2 or data3 or data4 or data5 or data6 or data7 or data8)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module Scanner_vlg_check_tst (
	DS1,
	DS2,
	DS3,
	DS4,
	DS5,
	DS6,
	DS7,
	DS8,
	LA,
	LB,
	LC,
	LD,
	LE,
	LF,
	LG,
	out,
	sampler_rx
);
input  DS1;
input  DS2;
input  DS3;
input  DS4;
input  DS5;
input  DS6;
input  DS7;
input  DS8;
input  LA;
input  LB;
input  LC;
input  LD;
input  LE;
input  LF;
input  LG;
input [3:0] out;
input sampler_rx;

reg  DS1_expected;
reg  DS2_expected;
reg  DS3_expected;
reg  DS4_expected;
reg  DS5_expected;
reg  DS6_expected;
reg  DS7_expected;
reg  DS8_expected;
reg  LA_expected;
reg  LB_expected;
reg  LC_expected;
reg  LD_expected;
reg  LE_expected;
reg  LF_expected;
reg  LG_expected;
reg [3:0] out_expected;

reg  DS1_prev;
reg  DS2_prev;
reg  DS3_prev;
reg  DS4_prev;
reg  DS5_prev;
reg  DS6_prev;
reg  DS7_prev;
reg  DS8_prev;
reg  LA_prev;
reg  LB_prev;
reg  LC_prev;
reg  LD_prev;
reg  LE_prev;
reg  LF_prev;
reg  LG_prev;
reg [3:0] out_prev;

reg  DS1_expected_prev;
reg  DS2_expected_prev;
reg  DS3_expected_prev;
reg  DS4_expected_prev;
reg  DS5_expected_prev;
reg  DS6_expected_prev;
reg  DS7_expected_prev;
reg  DS8_expected_prev;
reg  LA_expected_prev;
reg  LB_expected_prev;
reg  LC_expected_prev;
reg  LD_expected_prev;
reg  LE_expected_prev;
reg  LF_expected_prev;
reg  LG_expected_prev;
reg [3:0] out_expected_prev;

reg  last_DS1_exp;
reg  last_DS2_exp;
reg  last_DS3_exp;
reg  last_DS4_exp;
reg  last_DS5_exp;
reg  last_DS6_exp;
reg  last_DS7_exp;
reg  last_DS8_exp;
reg  last_LA_exp;
reg  last_LB_exp;
reg  last_LC_exp;
reg  last_LD_exp;
reg  last_LE_exp;
reg  last_LF_exp;
reg  last_LG_exp;
reg [3:0] last_out_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:16] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 16'b1;
end

// update real /o prevs

always @(trigger)
begin
	DS1_prev = DS1;
	DS2_prev = DS2;
	DS3_prev = DS3;
	DS4_prev = DS4;
	DS5_prev = DS5;
	DS6_prev = DS6;
	DS7_prev = DS7;
	DS8_prev = DS8;
	LA_prev = LA;
	LB_prev = LB;
	LC_prev = LC;
	LD_prev = LD;
	LE_prev = LE;
	LF_prev = LF;
	LG_prev = LG;
	out_prev = out;
end

// update expected /o prevs

always @(trigger)
begin
	DS1_expected_prev = DS1_expected;
	DS2_expected_prev = DS2_expected;
	DS3_expected_prev = DS3_expected;
	DS4_expected_prev = DS4_expected;
	DS5_expected_prev = DS5_expected;
	DS6_expected_prev = DS6_expected;
	DS7_expected_prev = DS7_expected;
	DS8_expected_prev = DS8_expected;
	LA_expected_prev = LA_expected;
	LB_expected_prev = LB_expected;
	LC_expected_prev = LC_expected;
	LD_expected_prev = LD_expected;
	LE_expected_prev = LE_expected;
	LF_expected_prev = LF_expected;
	LG_expected_prev = LG_expected;
	out_expected_prev = out_expected;
end



// expected DS1
initial
begin
	DS1_expected = 1'bX;
end 

// expected DS2
initial
begin
	DS2_expected = 1'bX;
end 

// expected DS3
initial
begin
	DS3_expected = 1'bX;
end 

// expected DS4
initial
begin
	DS4_expected = 1'bX;
end 

// expected DS5
initial
begin
	DS5_expected = 1'bX;
end 

// expected DS6
initial
begin
	DS6_expected = 1'bX;
end 

// expected DS7
initial
begin
	DS7_expected = 1'bX;
end 

// expected DS8
initial
begin
	DS8_expected = 1'bX;
end 

// expected LA
initial
begin
	LA_expected = 1'bX;
end 

// expected LB
initial
begin
	LB_expected = 1'bX;
end 

// expected LC
initial
begin
	LC_expected = 1'bX;
end 

// expected LD
initial
begin
	LD_expected = 1'bX;
end 

// expected LE
initial
begin
	LE_expected = 1'bX;
end 

// expected LF
initial
begin
	LF_expected = 1'bX;
end 

// expected LG
initial
begin
	LG_expected = 1'bX;
end 
// expected out[ 3 ]
initial
begin
	out_expected[3] = 1'bX;
end 
// expected out[ 2 ]
initial
begin
	out_expected[2] = 1'bX;
end 
// expected out[ 1 ]
initial
begin
	out_expected[1] = 1'bX;
end 
// expected out[ 0 ]
initial
begin
	out_expected[0] = 1'bX;
end 
// generate trigger
always @(DS1_expected or DS1 or DS2_expected or DS2 or DS3_expected or DS3 or DS4_expected or DS4 or DS5_expected or DS5 or DS6_expected or DS6 or DS7_expected or DS7 or DS8_expected or DS8 or LA_expected or LA or LB_expected or LB or LC_expected or LC or LD_expected or LD or LE_expected or LE or LF_expected or LF or LG_expected or LG or out_expected or out)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected DS1 = %b | expected DS2 = %b | expected DS3 = %b | expected DS4 = %b | expected DS5 = %b | expected DS6 = %b | expected DS7 = %b | expected DS8 = %b | expected LA = %b | expected LB = %b | expected LC = %b | expected LD = %b | expected LE = %b | expected LF = %b | expected LG = %b | expected out = %b | ",DS1_expected_prev,DS2_expected_prev,DS3_expected_prev,DS4_expected_prev,DS5_expected_prev,DS6_expected_prev,DS7_expected_prev,DS8_expected_prev,LA_expected_prev,LB_expected_prev,LC_expected_prev,LD_expected_prev,LE_expected_prev,LF_expected_prev,LG_expected_prev,out_expected_prev);
	$display("| real DS1 = %b | real DS2 = %b | real DS3 = %b | real DS4 = %b | real DS5 = %b | real DS6 = %b | real DS7 = %b | real DS8 = %b | real LA = %b | real LB = %b | real LC = %b | real LD = %b | real LE = %b | real LF = %b | real LG = %b | real out = %b | ",DS1_prev,DS2_prev,DS3_prev,DS4_prev,DS5_prev,DS6_prev,DS7_prev,DS8_prev,LA_prev,LB_prev,LC_prev,LD_prev,LE_prev,LF_prev,LG_prev,out_prev);
`endif
	if (
		( DS1_expected_prev !== 1'bx ) && ( DS1_prev !== DS1_expected_prev )
		&& ((DS1_expected_prev !== last_DS1_exp) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DS1 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DS1_expected_prev);
		$display ("     Real value = %b", DS1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_DS1_exp = DS1_expected_prev;
	end
	if (
		( DS2_expected_prev !== 1'bx ) && ( DS2_prev !== DS2_expected_prev )
		&& ((DS2_expected_prev !== last_DS2_exp) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DS2 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DS2_expected_prev);
		$display ("     Real value = %b", DS2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_DS2_exp = DS2_expected_prev;
	end
	if (
		( DS3_expected_prev !== 1'bx ) && ( DS3_prev !== DS3_expected_prev )
		&& ((DS3_expected_prev !== last_DS3_exp) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DS3 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DS3_expected_prev);
		$display ("     Real value = %b", DS3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_DS3_exp = DS3_expected_prev;
	end
	if (
		( DS4_expected_prev !== 1'bx ) && ( DS4_prev !== DS4_expected_prev )
		&& ((DS4_expected_prev !== last_DS4_exp) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DS4 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DS4_expected_prev);
		$display ("     Real value = %b", DS4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_DS4_exp = DS4_expected_prev;
	end
	if (
		( DS5_expected_prev !== 1'bx ) && ( DS5_prev !== DS5_expected_prev )
		&& ((DS5_expected_prev !== last_DS5_exp) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DS5 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DS5_expected_prev);
		$display ("     Real value = %b", DS5_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_DS5_exp = DS5_expected_prev;
	end
	if (
		( DS6_expected_prev !== 1'bx ) && ( DS6_prev !== DS6_expected_prev )
		&& ((DS6_expected_prev !== last_DS6_exp) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DS6 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DS6_expected_prev);
		$display ("     Real value = %b", DS6_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_DS6_exp = DS6_expected_prev;
	end
	if (
		( DS7_expected_prev !== 1'bx ) && ( DS7_prev !== DS7_expected_prev )
		&& ((DS7_expected_prev !== last_DS7_exp) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DS7 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DS7_expected_prev);
		$display ("     Real value = %b", DS7_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_DS7_exp = DS7_expected_prev;
	end
	if (
		( DS8_expected_prev !== 1'bx ) && ( DS8_prev !== DS8_expected_prev )
		&& ((DS8_expected_prev !== last_DS8_exp) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DS8 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DS8_expected_prev);
		$display ("     Real value = %b", DS8_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_DS8_exp = DS8_expected_prev;
	end
	if (
		( LA_expected_prev !== 1'bx ) && ( LA_prev !== LA_expected_prev )
		&& ((LA_expected_prev !== last_LA_exp) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port LA :: @time = %t",  $realtime);
		$display ("     Expected value = %b", LA_expected_prev);
		$display ("     Real value = %b", LA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_LA_exp = LA_expected_prev;
	end
	if (
		( LB_expected_prev !== 1'bx ) && ( LB_prev !== LB_expected_prev )
		&& ((LB_expected_prev !== last_LB_exp) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port LB :: @time = %t",  $realtime);
		$display ("     Expected value = %b", LB_expected_prev);
		$display ("     Real value = %b", LB_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_LB_exp = LB_expected_prev;
	end
	if (
		( LC_expected_prev !== 1'bx ) && ( LC_prev !== LC_expected_prev )
		&& ((LC_expected_prev !== last_LC_exp) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port LC :: @time = %t",  $realtime);
		$display ("     Expected value = %b", LC_expected_prev);
		$display ("     Real value = %b", LC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_LC_exp = LC_expected_prev;
	end
	if (
		( LD_expected_prev !== 1'bx ) && ( LD_prev !== LD_expected_prev )
		&& ((LD_expected_prev !== last_LD_exp) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port LD :: @time = %t",  $realtime);
		$display ("     Expected value = %b", LD_expected_prev);
		$display ("     Real value = %b", LD_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_LD_exp = LD_expected_prev;
	end
	if (
		( LE_expected_prev !== 1'bx ) && ( LE_prev !== LE_expected_prev )
		&& ((LE_expected_prev !== last_LE_exp) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port LE :: @time = %t",  $realtime);
		$display ("     Expected value = %b", LE_expected_prev);
		$display ("     Real value = %b", LE_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_LE_exp = LE_expected_prev;
	end
	if (
		( LF_expected_prev !== 1'bx ) && ( LF_prev !== LF_expected_prev )
		&& ((LF_expected_prev !== last_LF_exp) ||
			on_first_change[14])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port LF :: @time = %t",  $realtime);
		$display ("     Expected value = %b", LF_expected_prev);
		$display ("     Real value = %b", LF_prev);
		nummismatches = nummismatches + 1;
		on_first_change[14] = 1'b0;
		last_LF_exp = LF_expected_prev;
	end
	if (
		( LG_expected_prev !== 1'bx ) && ( LG_prev !== LG_expected_prev )
		&& ((LG_expected_prev !== last_LG_exp) ||
			on_first_change[15])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port LG :: @time = %t",  $realtime);
		$display ("     Expected value = %b", LG_expected_prev);
		$display ("     Real value = %b", LG_prev);
		nummismatches = nummismatches + 1;
		on_first_change[15] = 1'b0;
		last_LG_exp = LG_expected_prev;
	end
	if (
		( out_expected_prev[0] !== 1'bx ) && ( out_prev[0] !== out_expected_prev[0] )
		&& ((out_expected_prev[0] !== last_out_exp[0]) ||
			on_first_change[16])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out_expected_prev);
		$display ("     Real value = %b", out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[16] = 1'b0;
		last_out_exp[0] = out_expected_prev[0];
	end
	if (
		( out_expected_prev[1] !== 1'bx ) && ( out_prev[1] !== out_expected_prev[1] )
		&& ((out_expected_prev[1] !== last_out_exp[1]) ||
			on_first_change[16])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out_expected_prev);
		$display ("     Real value = %b", out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[16] = 1'b0;
		last_out_exp[1] = out_expected_prev[1];
	end
	if (
		( out_expected_prev[2] !== 1'bx ) && ( out_prev[2] !== out_expected_prev[2] )
		&& ((out_expected_prev[2] !== last_out_exp[2]) ||
			on_first_change[16])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out_expected_prev);
		$display ("     Real value = %b", out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[16] = 1'b0;
		last_out_exp[2] = out_expected_prev[2];
	end
	if (
		( out_expected_prev[3] !== 1'bx ) && ( out_prev[3] !== out_expected_prev[3] )
		&& ((out_expected_prev[3] !== last_out_exp[3]) ||
			on_first_change[16])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out_expected_prev);
		$display ("     Real value = %b", out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[16] = 1'b0;
		last_out_exp[3] = out_expected_prev[3];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module Scanner_vlg_vec_tst();
// constants                                           
// general purpose registers
reg clk_50mhz;
reg clk_hz;
reg [3:0] data1;
reg [3:0] data2;
reg [3:0] data3;
reg [3:0] data4;
reg [3:0] data5;
reg [3:0] data6;
reg [3:0] data7;
reg [3:0] data8;
// wires                                               
wire DS1;
wire DS2;
wire DS3;
wire DS4;
wire DS5;
wire DS6;
wire DS7;
wire DS8;
wire LA;
wire LB;
wire LC;
wire LD;
wire LE;
wire LF;
wire LG;
wire [3:0] out;

wire sampler;                             

// assign statements (if any)                          
Scanner i1 (
// port map - connection between master ports and signals/registers   
	.clk_50mhz(clk_50mhz),
	.clk_hz(clk_hz),
	.data1(data1),
	.data2(data2),
	.data3(data3),
	.data4(data4),
	.data5(data5),
	.data6(data6),
	.data7(data7),
	.data8(data8),
	.DS1(DS1),
	.DS2(DS2),
	.DS3(DS3),
	.DS4(DS4),
	.DS5(DS5),
	.DS6(DS6),
	.DS7(DS7),
	.DS8(DS8),
	.LA(LA),
	.LB(LB),
	.LC(LC),
	.LD(LD),
	.LE(LE),
	.LF(LF),
	.LG(LG),
	.out(out)
);

// clk_50mhz
initial
begin
	clk_50mhz = 1'b0;
end 

// clk_hz
always
begin
	clk_hz = 1'b0;
	clk_hz = #50000 1'b1;
	#50000;
end 
// data1[ 3 ]
initial
begin
	data1[3] = 1'b0;
end 
// data1[ 2 ]
initial
begin
	data1[2] = 1'b0;
end 
// data1[ 1 ]
initial
begin
	data1[1] = 1'b1;
end 
// data1[ 0 ]
initial
begin
	data1[0] = 1'b0;
end 
// data2[ 3 ]
initial
begin
	data2[3] = 1'b1;
end 
// data2[ 2 ]
initial
begin
	data2[2] = 1'b0;
end 
// data2[ 1 ]
initial
begin
	data2[1] = 1'b1;
end 
// data2[ 0 ]
initial
begin
	data2[0] = 1'b0;
end 
// data3[ 3 ]
initial
begin
	data3[3] = 1'b0;
end 
// data3[ 2 ]
initial
begin
	data3[2] = 1'b0;
end 
// data3[ 1 ]
initial
begin
	data3[1] = 1'b1;
end 
// data3[ 0 ]
initial
begin
	data3[0] = 1'b1;
end 
// data4[ 3 ]
initial
begin
	data4[3] = 1'b0;
end 
// data4[ 2 ]
initial
begin
	data4[2] = 1'b1;
end 
// data4[ 1 ]
initial
begin
	data4[1] = 1'b0;
end 
// data4[ 0 ]
initial
begin
	data4[0] = 1'b1;
end 
// data5[ 3 ]
initial
begin
	data5[3] = 1'b0;
end 
// data5[ 2 ]
initial
begin
	data5[2] = 1'b0;
end 
// data5[ 1 ]
initial
begin
	data5[1] = 1'b0;
end 
// data5[ 0 ]
initial
begin
	data5[0] = 1'b0;
end 
// data6[ 3 ]
initial
begin
	data6[3] = 1'b0;
end 
// data6[ 2 ]
initial
begin
	data6[2] = 1'b0;
end 
// data6[ 1 ]
initial
begin
	data6[1] = 1'b1;
end 
// data6[ 0 ]
initial
begin
	data6[0] = 1'b0;
end 
// data7[ 3 ]
initial
begin
	data7[3] = 1'b0;
end 
// data7[ 2 ]
initial
begin
	data7[2] = 1'b0;
end 
// data7[ 1 ]
initial
begin
	data7[1] = 1'b0;
end 
// data7[ 0 ]
initial
begin
	data7[0] = 1'b0;
end 
// data8[ 3 ]
initial
begin
	data8[3] = 1'b1;
end 
// data8[ 2 ]
initial
begin
	data8[2] = 1'b1;
end 
// data8[ 1 ]
initial
begin
	data8[1] = 1'b1;
end 
// data8[ 0 ]
initial
begin
	data8[0] = 1'b1;
end 

Scanner_vlg_sample_tst tb_sample (
	.clk_50mhz(clk_50mhz),
	.clk_hz(clk_hz),
	.data1(data1),
	.data2(data2),
	.data3(data3),
	.data4(data4),
	.data5(data5),
	.data6(data6),
	.data7(data7),
	.data8(data8),
	.sampler_tx(sampler)
);

Scanner_vlg_check_tst tb_out(
	.DS1(DS1),
	.DS2(DS2),
	.DS3(DS3),
	.DS4(DS4),
	.DS5(DS5),
	.DS6(DS6),
	.DS7(DS7),
	.DS8(DS8),
	.LA(LA),
	.LB(LB),
	.LC(LC),
	.LD(LD),
	.LE(LE),
	.LF(LF),
	.LG(LG),
	.out(out),
	.sampler_rx(sampler)
);
endmodule

